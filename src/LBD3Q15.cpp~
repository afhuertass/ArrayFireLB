
#include <arrayfire.h>
#include "2latticed3q15.h"
#include "ObstacleLoader.h"
#include "ForceModule.h"
#include <vector>

// Modelo 3d para lattice bolztman utlizando el metodo entrpico 
using namespace af;
LatticeBolztmannD3Q15::LatticeBolztmannD3Q15(int lx,int ly, int lz){
  //constructor
  this->q = 15;
  this->Lx=lx; // tamaÃ±o del lattice
  this->Ly=ly;
  this->Lz=lz;
  fs = std::vector<array>(q);
  
  for( int i = 0 ; i < q ; i++){
    this->fs[i] = af::constant(0,Lx,Ly,Lz , f32);
  }
  w = af::constant( 0 , q , f32);

  this->ConditionsU = af::constant(0, Lx,Ly,Lz,f32);

  w(0) = 16; w(1)=w(2)=w(3)=w(4)=w(5)=w(6) = 8;
  w(7)=w(8)=w(9)=w(10)=w(11)=w(12)=w(13)=w(14)=1;
  w = 1/72.0*w;
  W[0] = 16.0/72;
  W[1] = W[2] = W[3] =   W[4] = W[5] = W[6] = 8.0/72;
  W[7] = W[8] = W[9] =   W[10] = W[11] = W[12] = W[13] = W[14] = 1.0/72; 
  
  V[0][0] = 0; V[0][1] = 1; V[0][2] = 0; V[0][3] = 0 ; V[0][4] = -1;
  V[0][5] = 0; V[0][6] = 0; V[0][7] = 1; V[0][8] = -1 ; V[0][9] = 1;
  V[0][10] = 1; V[0][11] = -1; V[0][12] = 1; V[0][13] = -1 ; V[0][14] = -1;
  
  V[1][0] = 0; V[1][1] = 0; V[1][2] = 1; V[1][3] = 0 ; V[1][4] = 0;
  V[1][5] = -1; V[1][6] = 0; V[1][7] = 1; V[1][8] = 1 ; V[1][9] = -1;
  V[1][10] = 1; V[1][11] = -1; V[1][12] = -1; V[1][13] = 1 ; V[1][14] = -1;

  V[2][0] = 0; V[2][1] = 0; V[2][2] = 0; V[2][3] = 1 ; V[2][4] = 0;
  V[2][5] = 0; V[2][6] = -1; V[2][7] = 1; V[2][8] = 1 ; V[2][9] = 1;
  V[2][10] = -1; V[2][11] = 1; V[2][12] = -1; V[2][13] = -1 ; V[2][14] = -1;

 

}
void LatticeBolztmannD3Q15::Inicie(float r0 , float Ux0 , float Uy0 , float Uz0){
  array rh0 = af::constant( r0 , Lx, Ly, Lz , f32);
  array Uxs = af::constant( Ux0, Lx , Ly , Lz , f32);
  array Uys = af::constant( Uy0, Lx , Ly , Lz , f32);
  array Uzs = af::constant( Uz0, Lx , Ly , Lz , f32);

  //f = this->feq( rh0, Uxs , Uys, Uzs);
  SetConditions( Uxs , Uys, Uzs );
  int i = 0;
  for( i = 0; i< q ; i++ ) {
    this->fs[i] = this->feq2(i,rh0 , Uxs, Uys, Uzs ) ;
  }
  double C2 = 1.0/3;
  double Up = 2; // velocidad metros/s
  double Lp = 2; // metros - distancia fisica 
  double t0 = Lp/Up; // tiempo de refencia. 
  double Re = 100;
  
  double Ud = (t0/Lp)*Up;
  
  double visc_p = Up*Lp/Re;
  double dx = 1.0/Lx;
  double dt = 2*dx*dx;
  
  double Ulb = dt/dx*Ud;
  double visc_lb = (dt/(dx*dx))*(1/Re) ; 
  double tau = visc_lb/C2;
  
  /*double Re = 100 ; // numero de Reynolds
  double viscosidad = (r0*0.05*Lx)/Re; // rho*u*d/Re
  double cs2 = 1.0/3;
  double tau = viscosidad/cs2;
  
  double dx = 1.0/Lx;
  double dt = dx*dx;
  */
  beta = dt/(2*tau +dt);
  std::cout << "#beta:" << beta << std::endl;
  std::cout << "#Umax:" << Ulb << std::endl;
  this->UMAX = Ulb;
}
void LatticeBolztmannD3Q15::SetConditions(array &Ux, array &Uy , array &Uz){
  
// poiseullie 
 // plano x = 0 la velocidad es maxima
  
  Ux(0,span,span ) = this->UMAX;
  Uy(0,span,span ) = 0;
  Uz(0,span,span ) = 0;
  /*
    
  // plano x = Lx-1 no hay velocidad
  Ux(Lx-1,span,span ) = 0;
  Uy(Lx-1,span,span ) = 0;
  Uz(Lx-1,span,span ) = 0;
  
  // plano z = 0
  Ux(span,span,0) = 0;
  Uy(span,span,0) = 0;
  Uz(span,span,0) = 0;
  // plano z = Lz-1 
  Ux(span,span,Lz-1) = 0;
  Uy(span,span,Lz-1) = 0;
  Uz(span,span,Lz-1) = 0;
  
  // plano y = 0 
  Ux(span,0,span) = 0;
  Uy(span,0,span) = 0;
  Uz(span,0,span) = 0;
  // plano Y = ly-1
  Ux(span,Ly-1,span) = 0;
  Uy(span,Ly-1,span) = 0;
  Uz(span,Ly-1,span) = 0;
  

  */
  
  
}
void LatticeBolztmannD3Q15::setArrayC(array c){
  this->ConditionsU(span,span,span) = c(span,span,span);
}
array LatticeBolztmannD3Q15::feq2(int i ,  array &rhos, array &Uxs , array &Uys , array &Uzs){ 
  // 0 x , 1 y , 2 , z 
  //std::cout << W[i] << std::endl;
  return rhos*W[i]*aux(i,0, Uxs)*aux(i,1,Uys)*aux(i,2,Uzs);
}

array LatticeBolztmannD3Q15::rho(){
  array f = af::constant(0, Lx, Ly,Lz , f32 );
  
  //return (af::sum(f,3)); // suma a lo largo de la tercera componente
  for( int i = 0 ; i < q ; i++){
    f += this->fs[i];
  }
  return f;
}
array LatticeBolztmannD3Q15::Jx(){
  array Jx = af::constant(0 , Lx, Ly,Lz, f32);
  
  Jx += fs.at(1) -fs.at(4) + fs.at(7)-fs.at(8)+fs.at(9)+fs.at(10)-fs.at(11)+fs.at(12)-fs.at(13)-fs.at(14) ;
  
  return Jx;
}
array LatticeBolztmannD3Q15::Jy(){
  array Jy = af::constant(0 , Lx, Ly,Lz, f32);
  Jy += fs.at(2)-fs.at(5)+fs.at(7)+fs.at(8)-fs.at(9)+fs.at(10)-fs.at(11)-fs.at(12)+fs.at(13)-fs.at(14); 
  return Jy;
}
array LatticeBolztmannD3Q15::Jz(){
 array Jz = af::constant(0 , Lx, Ly,Lz, f32);
 Jz+= fs.at(3)-fs.at(6)+fs.at(7)+fs.at(8)+fs.at(9)-fs.at(10)+fs.at(11)-fs.at(12)-fs.at(13)-fs.at(14); 
  return Jz;
}
array  LatticeBolztmannD3Q15::aux(int i,int alpha, array &Ua){
  array u = af::constant(1, Lx,Ly,Lz, f32);
  array U2 = af::pow(Ua,2);
  array term1 =  (2*u-af::sqrt( 1+ 3*U2 ) );
  if ( V[alpha][i] == 0 ){
    return term1;
  }else {
    array term2 = af::pow((2*Ua+af::sqrt(1+3*U2 ) )/(u-Ua) , V[alpha][i]);
    return term1*term2;
  }
		  
 
}

void LatticeBolztmannD3Q15::Colission(){
  float rex = 1/0.53; // tau = 0.53
  array rho = this->rho();
  array Ux = (this->Jx()/rho)*this->ConditionsU ;
  array Uy = (this->Jy()/rho)*this->ConditionsU ;
  array Uz = (this->Jz()/rho)*this->ConditionsU ;
  //f +=  alpha*beta*( feq(rho,Ux,Uy,Uz ) - f  );
  /*af_print(Ux);
  this->SetConditions( Ux , Uy, Uz );
  af_print(Ux);
  */
  
  //af_print(  fs[1] );
  SetConditions( Ux , Uy, Uz );
  for( int i = 0; i < q ; i++){
    fs[i] =  fs[i] + rex*( feq2( i, rho,  Ux , Uy , Uz ) - fs[i] ); 
  } 
  //af_print( fs[ 1 ] );
}

void LatticeBolztmannD3Q15::Adveccion(){
  for(int i = 0; i< q ; i++){
    array fp = this->fs[i];
    // 0 1 2 , 0 2 1 ,  1 0 2 , 1 2 0 , 2 0 1 , 2 1 0   
    fs[i] = shift( fp , V[0][i] , V[1][i] , V[2][i] , 0 ) ;
   
  }
  
  //af_print(this->fs[j] );
   
}
void LatticeBolztmannD3Q15::Print(void){
  array rho = this->rho();
  array Ux = (this->Jx()/rho)*this->ConditionsU; 
  array Uy = (this->Jy()/rho)*this->ConditionsU  ;
  array Uz = (this->Jz()/rho)*this->ConditionsU;
  SetConditions( Ux , Uy, Uz );
  float *h_ux = Ux.host<float>();
  float *h_uy = Uy.host<float>();
  float *h_uz = Uz.host<float>();
  int x =  5 ;
  int z = Lz/2 ;
  
  for(int x = 0 ; x < Lx ; x += 5){
  for(int y = 0 ; y< Ly  ;y+= 5)  {
     for(int z = 0 ; z < Lz ; z+= 5)
	{
	  float ux = h_ux[x + Ly*(y + Lx*z) ], uy = h_uy[x + Ly*(y + Lx*z) ], uz =  h_uz[x + Ly*(y + Lx*z) ];
	  
	  std::cout << x << " "<< y << " " << z << " " << 50*ux << " " << 10*uy  << " " << 10*uz  << " " << std::sqrt(std::pow(ux,2) + std::pow(uy,2) + std::pow(uz,2) )<<std::endl;	
	  
	//std::cout << y << " "<< z << " " << uy << " " << uz << " " <<std::sqrt(ux*ux + uz*uz + uy*uy ) << std::endl; 
	}
     
       }
    std::cout << std::endl;
    }

  
  //af::free(h_ux);
  for(int y = 0 ; y < Ly ; y+= 1){
    float ux = h_ux[x + Ly*(y + Lx*z) ], uy = h_uy[x + Ly*(y + Lx*z) ], uz =  h_uz[x + Ly*(y + Lx*z) ];

    //std::cout << y  << " " << ux << std::endl;
  }
  //af::free(h_ux); af::free(h_uy); af::free(h_uz);
  delete [] h_ux;
  delete [] h_uy;
  delete [] h_uz;
}

void LatticeBolztmannD3Q15::SaveFs(std::string route_fs){
  
  std::ofstream file_fs(route_fs+"fs.txt");
  if( !file_fs.is_open() ) {
    std::cout << "ERROR ABRIENDO FS" << std::endl;
    return ;
  }
  file_fs << Lx << " " << Ly << " " << Lz << " " << q << "\n";
  float *fi;
  for( int alpha = 0 ; alpha < q ; alpha++){
    fi = this->fs[alpha].host<float>();
    for(int x = 0 ; x < Lx ; x ++)
      for(int y = 0 ; y< Ly  ;y++ ) 
	for(int z = 0 ; z < Lz ; z++){
	  float fval = fi[x + Ly*(y + Lx*z) ];
	  file_fs << x << " " << y << " " << z << " " << alpha << " " << fval <<"\n"; 
	  
	}
  }
  file_fs.close();
  // Guardando velocidades
  std::ofstream file_vs(route_fs+"vs.txt");
  if( !file_vs.is_open()){
    std::cout << "ERROR ABRIENDO VS" << std::endl;
    return;
  }
  
  for( int alpha = 0 ; alpha < q ; alpha++){
    file_vs << V[0][alpha] << " " << V[1][alpha]<< " " << V[2][alpha] << "\n";
  }
  file_vs.close();
  
  delete[] fi;
  
}
int main(int argc , char *argv[] ){
  int pasos = 500;
  int device = argc > 1 ? atoi(argv[1]) : 0 ;
  af::setDevice(device);
  //af::info();
  int Lx, Ly , Lz;
  Lx = 10; Ly = 10 ;  Lz = 10;
  double memory_size = (4*Lx*Ly*Lz*15);
  std::cout << "#Memoria requerida MB:" << memory_size/1e6 << std::endl;
  std::cout << "# vectores" << std::endl;
  std::cout << "# pasos :" << pasos << std::endl; 
  LatticeBolztmannD3Q15 fluid(Lx,Ly,Lz);
  fluid.Inicie(1, 0.2, 0, 0);
  std::string aaa = "./distri/";
  fluid.SaveFs(aaa);
  /*
  double fp[2][2][2][2];
  std::cout << "2 2 2 2" << std::endl;
  for( int ii = 0 ; ii < 2 ; ii++)
    for ( int jj = 0 ; jj < 2 ; jj++)
      for( int kk = 0 ; kk < 2 ; kk++)
	for( int qq = 0 ; qq < 2 ; qq++)
	  std::cout << ii << " " << jj << " " << kk << " " << qq <<" "<< ii*jj*kk << std::endl;
  
  
  int V[3][2];
  for( int i = 0 ; i < 3 ; i++){
    for( int qq = 0 ; qq < 2 ; qq++)
      std::cout << i << " " << qq << " " << i+qq << std::endl;
  } 
  */
  //ForceModule F(aaa);
  
  return 0;
}
