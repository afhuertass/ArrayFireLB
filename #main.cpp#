#include <arrayfire.h>
#include <iostream>
#include <stdio.h>
using namespace af;
/*
PROGRAMA PARA CALCULO DE DINAMICA DE FLUIDOS EN 3D UTILIZANDO UN METODO DE
LATTICE BOLZTMANN ENTROPICO D3Q15 
 */

/* Constantes 
 */
const int Lx = 100 , Ly = 100, Lz = 100;
const int q = 15;
const float alpha0 = 2;
const float beta = 

const float  RHO0 = 1.0 ,UX0 = 0.0 1, UY0 = 0.0, UZ0 = 0.0;
 
/* Definicion de la classe lattice bolztmann 
*/
/// Se realizaran modificaciones para buscar mejor performance
class LatticeBolztmann {
private:
  float V[2][q] ; // velocidades y pesos 
  array f;
  array Vel_x , Vel_y;
  array V_x, V_y , w;
public: // metodos
  LatticeBolztmann(void); // constructor
  void ImprimaAlgo(void);
  void Inicie(void);
  array feq(array &rhos, array &Uxs, array &Uys); 
  // calcular la funcion de equilibrio 
  array rho(); // array de las densidades en cada punto
  array Jx(); // array de las velocidades en X en cada punto
  array Jy();
  void AgregarCondiciones(array &Jx, array &Jy );
  void Colisione(void);
  void Adveccione(void);
  void ImprimaDebug(void );
  void Avance(void);
  void Evaluar(void);
};
LatticeBolztmann::LatticeBolztmann(){
 
  f = af::constant(1 , Lx , Ly , q , f32);
 
  Vel_x = af::constant(0,Lx,Ly,q,f32);
  Vel_y = af::constant(0,Lx,Ly,q,f32);
  
  V_x = af::constant(0, q , f32);
  V_y = af::constant(0 , q , f32);
  w = af::constant(0,q,f32);
  
  Vel_x.slice(0) = af::constant(0, Vel_x.slice(0).dims());
  Vel_x.slice(1) = af::constant(1, Vel_x.slice(1).dims());
  Vel_x.slice(2) = af::constant(0, Vel_x.slice(2).dims());
  Vel_x.slice(3) = af::constant(-1, Vel_x.slice(3).dims());
  Vel_x.slice(4) = af::constant(0, Vel_x.slice(4).dims());
  Vel_x.slice(5) = af::constant(1, Vel_x.slice(5).dims());
  Vel_x.slice(6) = af::constant(-1, Vel_x.slice(6).dims());
  Vel_x.slice(7) = af::constant(-1, Vel_x.slice(7).dims());
  Vel_x.slice(8) = af::constant(1, Vel_x.slice(8).dims());

  
  Vel_y.slice(0) = af::constant(0, Vel_y.slice(0).dims());
  Vel_y.slice(1) = af::constant(0, Vel_y.slice(1).dims());
  Vel_y.slice(2) = af::constant(1, Vel_y.slice(2).dims());
  Vel_y.slice(3) = af::constant(0, Vel_y.slice(3).dims());
  Vel_y.slice(4) = af::constant(-1, Vel_y.slice(4).dims());
  Vel_y.slice(5) = af::constant(1, Vel_y.slice(5).dims());
  Vel_y.slice(6) = af::constant(1, Vel_y.slice(6).dims());
  Vel_y.slice(7) = af::constant(-1, Vel_y.slice(7).dims());
  Vel_y.slice(8) = af::constant(-1, Vel_y.slice(8).dims());

  w(0)=4.0/9;    w(1)=w(2)=w(3)=w(4)=1.0/9;    w(5)=w(6)=w(7)=w(8)=1.0/36;
  

  V[0][0]=0;  
  V[1][0]=0;
  
  V[0][1]=1;  V[0][2]=0;  V[0][3]=-1; V[0][4]=0;  
  V[1][1]=0;  V[1][2]=1;  V[1][3]=0;  V[1][4]=-1;

  V[0][5]=1;  V[0][6]=-1; V[0][7]=-1; V[0][8]=1;  
  V[1][5]=1;  V[1][6]=1;  V[1][7]=-1; V[1][8]=-1;
  
  // en las velocidades estan los corrimientos!! 
  V_x(0) = 0; V_x(1)= 1; V_x(2)= 0; V_x(3) = -1;
  V_x(4) = 0; V_x(5)=1; V_x(6) = -1; V_x(7) = -1;
  V_x(8) = 1; 

  V_y(0) = 0; V_y(1)= 0; V_y(2)= 1; V_y(3) = 0;
  V_y(4) = -1; V_y(5)=1; V_y(6) = 1; V_y(7) = -1;
  V_y(8) = -1; 

  
  
}
void LatticeBolztmann::Inicie(void){
  array Ux = af::constant(UX0,  Lx,Ly);
  array Uy = af::constant(UY0, Lx,Ly);
  array Rho = af::constant(RHO0 ,Lx , Ly);

  f = this->feq( Rho , Ux , Uy); 
}
void LatticeBolztmann::AgregarCondiciones(array &Ux, array &Uy ){
  Ux.col(0) = 0.01;
  Ux.row(0) = 0;
  Ux.row(0) = 0;

}
array LatticeBolztmann::rho(){
  return ( af::sum( f, 2 ) ); 
}
array LatticeBolztmann::Jx(){
  array jx = (af::sum( f*Vel_x , 2) );
  

  //ux.row(0) = af::constant( 0.0 , ux.row(0).dims());
  //ux.row(end) =af::constant(0.0, ux.row(end).dims());
 
 return ( jx );

}
array LatticeBolztmann::Jy(){
  array jy = af::sum( f*Vel_y,2 );
 
  return ( jy );
}
array LatticeBolztmann::feq( array &rho, array &Ux, array &Uy){
  array U2;
  Ux = Ux/rho;
  Uy = Uy/rho;
  this->AgregarCondiciones(Ux,Uy);
  array feq2(Lx,Ly,q, f32);
  
  U2 = Ux*Ux+Uy*Uy;
  gfor( seq i , q) {
    array UpVi = Ux(span,span)*V_x(i) + Uy(span,span)*V_y(i);
    feq2(span,span,i) = rho(span,span)*(1+3*UpVi+4.5*(UpVi*UpVi)-1.5*U2)*w(i);
  }

   return (  feq2  ); 
  //array feq( Lx,Ly,q , f32);

}
void LatticeBolztmann::Colisione(void){
  array r = rho();
  array jx = Jx();
  array jy = Jy();
  f = f - 1.0/Tau*( f - this->feq( r , jx , jy  ) );
  
}
void LatticeBolztmann::Adveccione(void){
  
  for( int i = 0; i < q ; i++  ){
   
    //f.slice(i) = shift( f.slice(i) , V[1][i] , V[0][i] ,0  );
    f(span,span,i) = shift( f(span,span,i) , V[1][i] , V[0][i], 0);
    }
  
 
}
void LatticeBolztmann::ImprimaAlgo(void) {

  array ux = this->Jx()/this->rho();
  array uy = this->Jy()/this->rho();
  float *h_ux = ux.host<float>();
  float *h_uy = uy.host<float>();
  //for(int ii = 0; ii< ux.dims(0) ; ii+= 3 ) {
  int ii = 25;
    for( int jj = 0 ; jj < ux.dims(1); jj++)
      //std::cout << h_ux[ii* ux.dims(1) + jj] << " ";
      // std::cout << ii << " " << jj << " " << 100*h_ux[ii*ux.dims(0)+jj ] << " " << 100*h_uy[ii*ux.dims(0)+jj ]  << "\n " ;

  std::cout << jj << " " << h_ux[ii*ux.dims(0)+jj ] << "\n " ;
   
    //}
  
  
 }
void LatticeBolztmann::ImprimaDebug(void){
  
  //af_print(this->Jy()/this->rho());
  
}
void LatticeBolztmann::Evaluar(void){
  f.eval();
}
int main(int argc, char *argv[] ){
  // argumentos por consola
  try {
    int pasos = 1000;
    int device = argc > 1 ? atoi(argv[1]) : 0 ;
    af::setDevice(device);
    //af::info();
    LatticeBolztmann fluid;
    fluid.Inicie();
    timer reloj = timer::start();
    std::cout << "#------------------ Iniciando---------------" << std::endl;
    //fluid.ImprimaDebug();
    for(int i = 0; i < pasos   ; i++){
       fluid.Colisione();
       fluid.Adveccione();

    }
    double t = af::timer::stop(reloj);
    double LUPS = (pasos*Lx*Ly)/t;
    std::cout << "# -ensayo---- size: " << Lx <<" ,"<< Ly << std::endl;
    std::cout << "#pasos: " << pasos << std::endl;
    std::cout << "#tiempo - Lattice completo - evaluar cada 100  " <<  t << std::endl;
    std::cout << "#tiempo/pasos : " << t/pasos << std::endl; 
    //std::cout << "# fin ensayo :" << t << std::endl; 
    std::cout << "# LUPS :" << LUPS << std::endl ;
    std::cout << "#-----------------FINALIZANDO--------------  :" <<std::endl; 
    //fluid.ImprimaDebug();
     fluid.ImprimaAlgo();
  
  }catch(af::exception &e) {
    fprintf(stderr , "%s\n" , e.what());
    throw;
  }
  
  
}
